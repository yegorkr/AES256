
#include <vector>
#include <iostream>
#include <string>
#include <string>
#include <fstream>
#include <random>
#include <math.h>

using namespace std;


const int sBox[256] =
{ 0x63 ,0x7c ,0x77 ,0x7b ,0xf2 ,0x6b ,0x6f ,0xc5 ,0x30 ,0x01 ,0x67 ,0x2b ,0xfe ,0xd7 ,0xab ,0x76
,0xca ,0x82 ,0xc9 ,0x7d ,0xfa ,0x59 ,0x47 ,0xf0 ,0xad ,0xd4 ,0xa2 ,0xaf ,0x9c ,0xa4 ,0x72 ,0xc0
,0xb7 ,0xfd ,0x93 ,0x26 ,0x36 ,0x3f ,0xf7 ,0xcc ,0x34 ,0xa5 ,0xe5 ,0xf1 ,0x71 ,0xd8 ,0x31 ,0x15
,0x04 ,0xc7 ,0x23 ,0xc3 ,0x18 ,0x96 ,0x05 ,0x9a ,0x07 ,0x12 ,0x80 ,0xe2 ,0xeb ,0x27 ,0xb2 ,0x75
,0x09 ,0x83 ,0x2c ,0x1a ,0x1b ,0x6e ,0x5a ,0xa0 ,0x52 ,0x3b ,0xd6 ,0xb3 ,0x29 ,0xe3 ,0x2f ,0x84
,0x53 ,0xd1 ,0x00 ,0xed ,0x20 ,0xfc ,0xb1 ,0x5b ,0x6a ,0xcb ,0xbe ,0x39 ,0x4a ,0x4c ,0x58 ,0xcf
,0xd0 ,0xef ,0xaa ,0xfb ,0x43 ,0x4d ,0x33 ,0x85 ,0x45 ,0xf9 ,0x02 ,0x7f ,0x50 ,0x3c ,0x9f ,0xa8
,0x51 ,0xa3 ,0x40 ,0x8f ,0x92 ,0x9d ,0x38 ,0xf5 ,0xbc ,0xb6 ,0xda ,0x21 ,0x10 ,0xff ,0xf3 ,0xd2
,0xcd ,0x0c ,0x13 ,0xec ,0x5f ,0x97 ,0x44 ,0x17 ,0xc4 ,0xa7 ,0x7e ,0x3d ,0x64 ,0x5d ,0x19 ,0x73
,0x60 ,0x81 ,0x4f ,0xdc ,0x22 ,0x2a ,0x90 ,0x88 ,0x46 ,0xee ,0xb8 ,0x14 ,0xde ,0x5e ,0x0b ,0xdb
,0xe0 ,0x32 ,0x3a ,0x0a ,0x49 ,0x06 ,0x24 ,0x5c ,0xc2 ,0xd3 ,0xac ,0x62 ,0x91 ,0x95 ,0xe4 ,0x79
,0xe7 ,0xc8 ,0x37 ,0x6d ,0x8d ,0xd5 ,0x4e ,0xa9 ,0x6c ,0x56 ,0xf4 ,0xea ,0x65 ,0x7a ,0xae ,0x08
,0xba ,0x78 ,0x25 ,0x2e ,0x1c ,0xa6 ,0xb4 ,0xc6 ,0xe8 ,0xdd ,0x74 ,0x1f ,0x4b ,0xbd ,0x8b ,0x8a
,0x70 ,0x3e ,0xb5 ,0x66 ,0x48 ,0x03 ,0xf6 ,0x0e ,0x61 ,0x35 ,0x57 ,0xb9 ,0x86 ,0xc1 ,0x1d ,0x9e
,0xe1 ,0xf8 ,0x98 ,0x11 ,0x69 ,0xd9 ,0x8e ,0x94 ,0x9b ,0x1e ,0x87 ,0xe9 ,0xce ,0x55 ,0x28 ,0xdf
,0x8c ,0xa1 ,0x89 ,0x0d ,0xbf ,0xe6 ,0x42 ,0x68 ,0x41 ,0x99 ,0x2d ,0x0f ,0xb0 ,0x54 ,0xbb ,0x16 };

const int invS[256] =
{ 0x52 ,0x09 ,0x6a ,0xd5 ,0x30 ,0x36 ,0xa5 ,0x38 ,0xbf ,0x40 ,0xa3 ,0x9e ,0x81 ,0xf3 ,0xd7 ,0xfb
,0x7c ,0xe3 ,0x39 ,0x82 ,0x9b ,0x2f ,0xff ,0x87 ,0x34 ,0x8e ,0x43 ,0x44 ,0xc4 ,0xde ,0xe9 ,0xcb
,0x54 ,0x7b ,0x94 ,0x32 ,0xa6 ,0xc2 ,0x23 ,0x3d ,0xee ,0x4c ,0x95 ,0x0b ,0x42 ,0xfa ,0xc3 ,0x4e
,0x08 ,0x2e ,0xa1 ,0x66 ,0x28 ,0xd9 ,0x24 ,0xb2 ,0x76 ,0x5b ,0xa2 ,0x49 ,0x6d ,0x8b ,0xd1 ,0x25
,0x72 ,0xf8 ,0xf6 ,0x64 ,0x86 ,0x68 ,0x98 ,0x16 ,0xd4 ,0xa4 ,0x5c ,0xcc ,0x5d ,0x65 ,0xb6 ,0x92
,0x6c ,0x70 ,0x48 ,0x50 ,0xfd ,0xed ,0xb9 ,0xda ,0x5e ,0x15 ,0x46 ,0x57 ,0xa7 ,0x8d ,0x9d ,0x84
,0x90 ,0xd8 ,0xab ,0x00 ,0x8c ,0xbc ,0xd3 ,0x0a ,0xf7 ,0xe4 ,0x58 ,0x05 ,0xb8 ,0xb3 ,0x45 ,0x06
,0xd0 ,0x2c ,0x1e ,0x8f ,0xca ,0x3f ,0x0f ,0x02 ,0xc1 ,0xaf ,0xbd ,0x03 ,0x01 ,0x13 ,0x8a ,0x6b
,0x3a ,0x91 ,0x11 ,0x41 ,0x4f ,0x67 ,0xdc ,0xea ,0x97 ,0xf2 ,0xcf ,0xce ,0xf0 ,0xb4 ,0xe6 ,0x73
,0x96 ,0xac ,0x74 ,0x22 ,0xe7 ,0xad ,0x35 ,0x85 ,0xe2 ,0xf9 ,0x37 ,0xe8 ,0x1c ,0x75 ,0xdf ,0x6e
,0x47 ,0xf1 ,0x1a ,0x71 ,0x1d ,0x29 ,0xc5 ,0x89 ,0x6f ,0xb7 ,0x62 ,0x0e ,0xaa ,0x18 ,0xbe ,0x1b
,0xfc ,0x56 ,0x3e ,0x4b ,0xc6 ,0xd2 ,0x79 ,0x20 ,0x9a ,0xdb ,0xc0 ,0xfe ,0x78 ,0xcd ,0x5a ,0xf4
,0x1f ,0xdd ,0xa8 ,0x33 ,0x88 ,0x07 ,0xc7 ,0x31 ,0xb1 ,0x12 ,0x10 ,0x59 ,0x27 ,0x80 ,0xec ,0x5f
,0x60 ,0x51 ,0x7f ,0xa9 ,0x19 ,0xb5 ,0x4a ,0x0d ,0x2d ,0xe5 ,0x7a ,0x9f ,0x93 ,0xc9 ,0x9c ,0xef
,0xa0 ,0xe0 ,0x3b ,0x4d ,0xae ,0x2a ,0xf5 ,0xb0 ,0xc8 ,0xeb ,0xbb ,0x3c ,0x83 ,0x53 ,0x99 ,0x61
,0x17 ,0x2b ,0x04 ,0x7e ,0xba ,0x77 ,0xd6 ,0x26 ,0xe1 ,0x69 ,0x14 ,0x63 ,0x55 ,0x21 ,0x0c ,0x7d };

const unsigned char m9[256] =
{
	0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
	0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
	0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
	0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
	0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
	0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
	0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
	0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
	0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
	0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
	0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
	0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
	0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
	0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
	0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
	0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

const unsigned char m11[256] =
{
	0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
	0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
	0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
	0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
	0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
	0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
	0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
	0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
	0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
	0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
	0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
	0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
	0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
	0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
	0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
	0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

const unsigned char m13[256] =
{
	0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
	0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
	0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
	0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
	0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
	0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
	0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
	0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
	0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
	0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
	0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
	0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
	0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
	0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
	0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
	0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

const unsigned char m14[256] =
{
	0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
	0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
	0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
	0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
	0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
	0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
	0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
	0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
	0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
	0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
	0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
	0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
	0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
	0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
	0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
	0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

const int Nb = 4;
const int Nr = 14;
const int Nk = 8;

unsigned int W[(Nr + 1) * Nb];

const unsigned int Rcon[10] =
{ 0x00000000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000 };


unsigned char** AddRoundKey(unsigned char** state, int pos) {
	unsigned char m = (1 << 8) - 1;
	for (int i = 0; i < 4; ++i) {
		state[0][i] = (unsigned char)(state[0][i] ^ (unsigned char)(W[pos + i] >> 24));
		state[1][i] = (unsigned char)(state[1][i] ^ (unsigned char)(W[pos + i] >> 16));
		state[2][i] = (unsigned char)(state[2][i] ^ (unsigned char)(W[pos + i] >> 8));
		state[3][i] = (unsigned char)(state[3][i] ^ (unsigned char)(W[pos + i]));
	}
	return state;
}

unsigned char** SubBytes(unsigned char ** state) {
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j)
			state[i][j] = sBox[state[i][j]];
	return state;
}

unsigned char** ShiftRows(unsigned char ** state) {
	unsigned char temp;
	//row 1
	temp = state[1][0];
	state[1][0] = state[1][1];
	state[1][1] = state[1][2];
	state[1][2] = state[1][3];
	state[1][3] = temp;
	//row 2
	temp = state[2][0];
	state[2][0] = state[2][2];
	state[2][2] = temp;
	temp = state[2][1];
	state[2][1] = state[2][3];
	state[2][3] = temp;
	//row 3
	temp = state[3][3];
	state[3][3] = state[3][2];
	state[3][2] = state[3][1];
	state[3][1] = state[3][0];
	state[3][0] = temp;
	return state;
}

unsigned char ** MixColumns(unsigned char ** state) {
	for (int i = 0; i < Nb; ++i) {
		unsigned char a[4]; //b is a * 2
		unsigned char b[4]; //a ^ b is a * 3
		unsigned char c;
		unsigned char h;
		for (c = 0; c < 4; c++) {
			a[c] = state[c][i];
			/* h is 0xff if the high bit of r[c] is set, 0 otherwise */
			h = (unsigned char)((signed char)state[c][i] >> 7);
			b[c] = state[c][i] << 1;
			b[c] ^= 0x1B & h; /* Rijndael's Galois field */
		}
		state[0][i] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]; // 2 * a0 + a3 + a2 + 3 * a1
		state[1][i] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]; // 2 * a1 + a0 + a3 + 3 * a2
		state[2][i] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]; // 2 * a2 + a1 + a0 + 3 * a3
		state[3][i] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]; // 2 * a3 + a2 + a1 + 3 * a0
	}
	return state;
}

unsigned int SubWord(unsigned int word) {
	unsigned char m = (1 << 8) - 1;
	unsigned char c1 = sBox[(unsigned char)(m & word)];
	unsigned char c2 = sBox[(unsigned char)(m & (word >> 8))];
	unsigned char c3 = sBox[(unsigned char)(m & (word >> 16))];
	unsigned char c4 = sBox[(unsigned char)(m & (word >> 24))];
	word = 0;
	return ((((word | c1) | (word | c2 << 8)) | (word | c3 << 16)) | (word | c4 << 24));
}

unsigned int RotWord(unsigned int word) {
	unsigned char m = (1 << 8) - 1;
	unsigned char c1 = (unsigned char)(m & word >> 24);
	unsigned char c2 = (unsigned char)(m & (word >> 16));
	unsigned char c3 = (unsigned char)(m & (word >> 8));
	unsigned char c4 = (unsigned char)(m & (word));
	word = 0;
	return ((((word | c2 << 24) | (word | c3 << 16)) | (word | c4 << 8)) | (word | c1));
}

void KeyExpansion(unsigned char* key) {
	unsigned int temp;
	for (int i = 0; i < Nk; ++i) W[i] = (((unsigned int)0 | key[4 * i] << 24) | (key[4 * i + 1] << 16) |
		(key[4 * i + 2] << 8) | (key[4 * i + 3]));
	for (int i = Nk; i < Nb * (Nr + 1); ++i) {
		temp = W[i - 1];
		if (i % Nk == 0) temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk];
		else if (Nk > 6 && i % Nk == 4) temp = SubWord(temp);
		W[i] = W[i - Nk] ^ temp;
	}
}

unsigned char * Cipher(unsigned char input[4 * Nb]) {
	unsigned char out[16];
	unsigned char ** state;
	state = new unsigned char* [4];
	for (int i = 0; i < 4; ++i)
		state[i] = new unsigned char[4];
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j) 
			state[j][i] = input[i * 4 + j];
	state = AddRoundKey(state, 0);
	for (int round = 1; round < Nr; ++round) {
		state = SubBytes(state);
		state = ShiftRows(state);
		state = MixColumns(state);
		state = AddRoundKey(state, round * 4);
	}
	state = SubBytes(state);
	state = ShiftRows(state);
	state = AddRoundKey(state, Nr * Nb);

	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j)
			out[i * 4 + j] = state[j][i];
	delete[] state;
	return out;
}

unsigned char** InvSubBytes(unsigned char** state) {
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j)
			state[i][j] = invS[state[i][j]];
	return state;
}

unsigned char** InvShiftRows(unsigned char** state) {
	unsigned char temp;
	//row 3
	temp = state[3][0];
	state[3][0] = state[3][1];
	state[3][1] = state[3][2];
	state[3][2] = state[3][3];
	state[3][3] = temp;
	//row 2
	temp = state[2][0];
	state[2][0] = state[2][2];
	state[2][2] = temp;
	temp = state[2][1];
	state[2][1] = state[2][3];
	state[2][3] = temp;
	//row 1
	temp = state[1][3];
	state[1][3] = state[1][2];
	state[1][2] = state[1][1];
	state[1][1] = state[1][0];
	state[1][0] = temp;
	return state;
}

unsigned char** InvMixColumns(unsigned char** state) {
	for (int i = 0; i < Nb; ++i) {
		unsigned char a[4];
		unsigned char c;
		for (c = 0; c < 4; c++)
			a[c] = state[c][i];
		state[0][i] = m14[a[0]] ^ m11[a[1]] ^ m13[a[2]] ^ m9[a[3]];
		state[1][i] = m9[a[0]] ^ m14[a[1]] ^ m11[a[2]] ^ m13[a[3]];
		state[2][i] = m13[a[0]] ^ m9[a[1]] ^ m14[a[2]] ^ m11[a[3]];
		state[3][i] = m11[a[0]] ^ m13[a[1]] ^ m9[a[2]] ^ m14[a[3]];
	}
	return state;
}

unsigned char ** InvCipher(unsigned char input[4 * Nb]) {
	unsigned char** state;
	state = new unsigned char* [4];
	for (int i = 0; i < 4; ++i)
		state[i] = new unsigned char[4];
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j)
			state[j][i] = input[i * 4 + j];
	state = AddRoundKey(state, Nr * Nb);
	for (int round = Nr - 1; round > 0; --round) {
		state = InvShiftRows(state);
		state = InvSubBytes(state);
		state = AddRoundKey(state, round * 4);
		state = InvMixColumns(state);
	}
	state = InvShiftRows(state);
	state = InvSubBytes(state);
	state = AddRoundKey(state, 0);
	return state;
}

void ConvertToCharArray(unsigned char* arr, long long a) {
	for (int i = 0; i < 8; ++i)
		arr[i] = (unsigned char)((((unsigned long long) a) >> (56 - (8 * i))) & 0xFFu);
}

unsigned char* Xor (unsigned char * a, unsigned char * b){
	unsigned char c[16];
	for (int i = 0; i < 16; ++i) c[i] = (unsigned char)(a[i] ^ b[i]);
	return c;
}

void CTRE(unsigned char * key) {
	long long nnc = 7626731234; long long ctr = 0;
	unsigned char arr[16];
	unsigned char arr2[16];
	unsigned char ans[16];
	ConvertToCharArray(&arr[0], nnc);
	ConvertToCharArray(&arr[8], ctr);
	ifstream input("C:\\im.png", ios::binary);
	ofstream output("C:\\enc.png", ios::out | ios::binary);
	vector<unsigned char> outBuffer;
	vector<unsigned char> inBuffer(istreambuf_iterator<char>(input), {});
	while (inBuffer.size() % 16 != 0) inBuffer.push_back(0);

	KeyExpansion(key);

	for (long long i = 0; i < inBuffer.size(); i+=16) {
		ConvertToCharArray(&arr[8], ctr);
		for (int j = 0; j < 16; ++j) arr2[j] = inBuffer[i + j];
		unsigned char* res = Cipher(arr);
		for (int j = 0; j < 16; ++j) ans[j] = res[j] ^ arr2[j];
		for(int j = 0; j < 16; ++j) outBuffer.push_back(ans[j]);
		++ctr;
	}
	output.write((char*)&outBuffer[0], outBuffer.size());
	output.close();
	input.close();
}

void CTRD(unsigned char* key) {
	long long nnc = 7626731234; long long ctr = 0;
	unsigned char arr[16];
	unsigned char arr2[16];
	unsigned char ans[16];
	ConvertToCharArray(&arr[0], nnc);
	ConvertToCharArray(&arr[8], ctr);
	ifstream input("C:\\enc.png", ios::binary);
	ofstream output("C:\\dec.png", ios::out | ios::binary);
	vector<unsigned char> outBuffer;
	vector<unsigned char> inBuffer(istreambuf_iterator<char>(input), {});

	KeyExpansion(key);

	for (long long i = 0; i < inBuffer.size(); i += 16) {
		ConvertToCharArray(&arr[8], ctr);
		for (int j = 0; j < 16; ++j) arr2[j] = inBuffer[i + j];
		unsigned char* res = Cipher(arr);
		for (int j = 0; j < 16; ++j) ans[j] = res[j] ^ arr2[j];
		for (int j = 0; j < 16; ++j) outBuffer.push_back(ans[j]);
		++ctr;
	}
	while (outBuffer.back() == 0) outBuffer.pop_back();
	output.write((char*)& outBuffer[0], outBuffer.size());
	output.close();
	input.close();
}

void OFBE(unsigned char* key) {
	unsigned char VI[16] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
	unsigned char arr2[16];
	unsigned char ans[16];
	ifstream input("C:\\im.png", ios::binary);
	ofstream output("C:\\enc.png", ios::out | ios::binary);
	vector<unsigned char> outBuffer;
	vector<unsigned char> inBuffer(istreambuf_iterator<char>(input), {});
	while (inBuffer.size() % 16 != 0) inBuffer.push_back(0);

	KeyExpansion(key);

	for (long long i = 0; i < inBuffer.size(); i += 16) {
		for (int j = 0; j < 16; ++j) arr2[j] = inBuffer[i + j];
		unsigned char* res = Cipher(VI);
		for (int j = 0; j < 16; ++j) VI[j] = res[j];
		for (int j = 0; j < 16; ++j) ans[j] = res[j] ^ arr2[j];
		for (int j = 0; j < 16; ++j) outBuffer.push_back(ans[j]);
	}
	output.write((char*)& outBuffer[0], outBuffer.size());
	output.close();
	input.close();
}

void OFBD(unsigned char* key) {
	unsigned char VI[16] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
	unsigned char arr2[16];
	unsigned char ans[16];
	ifstream input("C:\\enc.png", ios::binary);
	ofstream output("C:\\dec.png", ios::out | ios::binary);
	vector<unsigned char> outBuffer;
	vector<unsigned char> inBuffer(istreambuf_iterator<char>(input), {});

	KeyExpansion(key);

	for (long long i = 0; i < inBuffer.size(); i += 16) {
		for (int j = 0; j < 16; ++j) arr2[j] = inBuffer[i + j];
		unsigned char* res = Cipher(VI);
		for (int j = 0; j < 16; ++j) VI[j] = res[j];
		for (int j = 0; j < 16; ++j) ans[j] = res[j] ^ arr2[j];
		for (int j = 0; j < 16; ++j) outBuffer.push_back(ans[j]);
	}
	while (outBuffer.back() == 0) outBuffer.pop_back();
	output.write((char*)& outBuffer[0], outBuffer.size());
	output.close();
	input.close();
}


int main() {
	unsigned char input[16] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
	unsigned char iinput[16];
	//unsigned char key[32] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
	unsigned char key[32];
	for (int i = 0; i < 32; ++i) key[i] = i;
	unsigned char** c;
	c = new unsigned char* [4];
	for (int i = 0; i < 4; ++i)
		c[i] = new unsigned char [4];

	/*
	c = Cipher(input);
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j)
			iinput[i * 4 + j] = c[j][i];

	c = InvCipher(iinput);
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < Nb; ++j)
			iinput[i * 4 + j] = c[j][i];
	
	for (int i = 0; i < 16; ++i) cout << (int)input[i];
	cout << '\n';
	for (int i = 0; i < 16; ++i) cout << (int)iinput[i];
	cout << '\n';  */
	OFBD(key);

	return 0;
}